//
//  main.cpp
//  sisp
//
//  Created by 徐可 on 2020/2/12.
//  Copyright © 2020 Beibei Inc. All rights reserved.
//

#include <iostream>
#include <vector>
#include <map>

using namespace std;

enum Token {
    tok_eof = -1,
    tok_def = -2,
    tok_extern = -3,
    tok_identifier = -4,
    tok_number = -5,
};

static string IdentifierStr;
static double NumVal;

static string TheCode;
static int GetChar() {
    static int Index = 0;
    if (Index >= TheCode.length())
        return EOF;
    char CurChar = TheCode.at(Index++);
//    cout << "getchar [" << string(1, CurChar) << "]" << endl;
    return CurChar;
}

//#define GetChar getchar

static char LastChar = ' ';

static int gettok() {
    while (isspace(LastChar)) {
        LastChar = GetChar();
    }

    if (isalpha(LastChar)) {
        IdentifierStr = LastChar;
        while (isalnum(LastChar = GetChar())) {
            IdentifierStr += LastChar;
        }

        if (IdentifierStr == "def") {
            return tok_def;
        }
        if (IdentifierStr == "extern") {
            return tok_extern;
        }
        if (IdentifierStr == "exit") {
            exit(0);
        }
        return tok_identifier;
    }

    if (isdigit(LastChar) || LastChar == '.') {
        string NumStr;
        do {
            NumStr += LastChar;
            LastChar = GetChar();
        } while (isdigit(LastChar) || LastChar == '.');

        NumVal = strtod(NumStr.c_str(), 0);
        return tok_number;
    }

    if (LastChar == '#') {
        do {
            LastChar = GetChar();
        } while (LastChar != EOF && LastChar != '\n' && LastChar != '\r');

        if (LastChar != EOF) {
            return gettok();
        }
    }

    if (LastChar == EOF) {
        return tok_eof;
    }

    int ThisChar = LastChar;
    LastChar = GetChar();
    return ThisChar;
}

static string tokenName(int tok) {
    switch (tok) {
        case tok_eof:
            return "eof";
        case tok_def:
            return "def";
        case tok_extern:
            return "extern";
        case tok_number:
            return "number";
        case tok_identifier:
            return "identifier";
        default:
            break;
    }
    return "unkonw";
}

class ExprAST {
public:
    ExprAST() {}
    virtual ~ExprAST() {}
};

static unique_ptr<ExprAST> ParseExpr();

class NumberExprAST : public ExprAST {
    double Val;

public:
    NumberExprAST(double Val): Val(Val) {}
};

class VariableExprAST : public ExprAST {
    string Name;

public:
    VariableExprAST(const string &name) : Name(name) {}
};

class BinaryExprAST : public ExprAST {
    char Op;
    unique_ptr<ExprAST> LHS, RHS;

public:
    BinaryExprAST(char op, unique_ptr<ExprAST> lhs, unique_ptr<ExprAST> rhs)
        : Op(op), LHS(move(lhs)), RHS(move(rhs)) {}
};

class CallExprAST : public ExprAST {
    string Callee;
    vector<unique_ptr<ExprAST>> Args;

public:
    CallExprAST(const string &callee, vector<unique_ptr<ExprAST>> args)
        : Callee(callee), Args(move(args)) {}
};

class PrototypeAST {
    string Name;
    vector<string> Args;

public:
    PrototypeAST(string &name, vector<string> args)
        : Name(name), Args(move(args)) {}
};

class FunctionAST {
    unique_ptr<PrototypeAST> Proto;
    unique_ptr<ExprAST> Body;

public:
    FunctionAST(unique_ptr<PrototypeAST> proto, unique_ptr<ExprAST> body)
        : Proto(move(proto)), Body(move(body)) {}
};

static int CurTok;
static int getNextToken() {
    return CurTok = gettok();
}

static unique_ptr<ExprAST> LogError(const char *Str) {
    cerr << "LogError: " << Str << endl;
    return nullptr;
}
static unique_ptr<PrototypeAST> LogErrorP(const char *Str) {
    LogError(Str);
    return nullptr;
}

static unique_ptr<ExprAST> ParseNumberExpr() {
    auto Result = make_unique<NumberExprAST>(NumVal);
    getNextToken();
    return move(Result);
}

static unique_ptr<ExprAST> ParseParentExpr() {
    getNextToken();
    auto V = ParseExpr();
    if (!V)
        return nullptr;

    if (CurTok != ')')
        return LogError("expected ')'");

    getNextToken();
    return V;
}

static std::unique_ptr<ExprAST> ParseIdentifierExpr() {
  std::string IdName = IdentifierStr;

  getNextToken(); // eat identifier.

  if (CurTok != '(') // Simple variable ref.
    return std::make_unique<VariableExprAST>(IdName);

  // Call.
  getNextToken(); // eat (
  std::vector<std::unique_ptr<ExprAST>> Args;
  if (CurTok != ')') {
    while (true) {
      if (auto Arg = ParseExpr())
        Args.push_back(std::move(Arg));
      else
        return nullptr;

      if (CurTok == ')')
        break;

      if (CurTok != ',')
        return LogError("Expected ')' or ',' in argument list");
      getNextToken();
    }
  }

  // Eat the ')'.
  getNextToken();

  return std::make_unique<CallExprAST>(IdName, std::move(Args));
}

static unique_ptr<ExprAST> ParsePrimary() {
    switch (CurTok) {
        case tok_identifier:
            return ParseIdentifierExpr();
        case tok_number:
            return ParseNumberExpr();
        case '(':
            return ParseParentExpr();
        default:
            return LogError("unkown token when execepting an expression");
    }
}

static map<char, int> BinOpPrecedence;

static int GetTokenPrecedence() {
    if (!isascii(CurTok)) {
        return -1;
    }

    int TokPrec = BinOpPrecedence[CurTok];
    if (TokPrec <= 0) {
        return -1;
    }

    return TokPrec;
}

static unique_ptr<ExprAST> ParseBinOpRHS(int ExprPrec, unique_ptr<ExprAST> LHS);

static unique_ptr<ExprAST> ParseExpr() {
    auto LHS = ParsePrimary();
    if (!LHS) {
        return nullptr;
    }

    return ParseBinOpRHS(0, move(LHS));
}

static unique_ptr<ExprAST> ParseBinOpRHS(int ExprPrec, unique_ptr<ExprAST> LHS) {
    while (true) {
        int TokPrec = GetTokenPrecedence();

        if (TokPrec < ExprPrec) {
            return LHS;
        }

        int BinOp = CurTok;
        getNextToken();

        auto RHS = ParsePrimary();
        if (!RHS) {
            return nullptr;
        }

        int NextPrec = GetTokenPrecedence();
        if (TokPrec < NextPrec) {
            RHS = ParseBinOpRHS(TokPrec + 1, move(RHS));
            if (!RHS) {
                return nullptr;
            }
        }

        LHS = make_unique<BinaryExprAST>(BinOp, move(LHS), move(RHS));
    }
}

static unique_ptr<PrototypeAST> ParsePrototype() {
    if (CurTok != tok_identifier) {
        return LogErrorP("Expected function name in prototype");
    }

    string FnName = IdentifierStr;
    getNextToken();

    if (CurTok != '(') {
        return LogErrorP("Expected '(' in prototype");
    }

    vector<string> ArgNames;
    while (getNextToken() == tok_identifier) {
        ArgNames.push_back(IdentifierStr);
    }
    if (isspace(CurTok)) {
        getNextToken();
    }
    if (CurTok != ')') {
        return LogErrorP("Expected ')' in prototype");
    }

    getNextToken();

    return make_unique<PrototypeAST>(FnName, move(ArgNames));
}

static unique_ptr<FunctionAST> ParseDefinition() {
    getNextToken();
    auto Proto = ParsePrototype();
    if (!Proto) {
        return nullptr;
    }

    if (auto E = ParseExpr())
        return make_unique<FunctionAST>(move(Proto), move(E));

    return nullptr;
}

static unique_ptr<PrototypeAST> ParseExtern() {
    getNextToken();
    return ParsePrototype();
}

static unique_ptr<FunctionAST> ParseTopLevelExpr() {
    if (auto E = ParseExpr()) {
        string Name = "";
        auto Proto = make_unique<PrototypeAST>(Name, vector<string>());
        return make_unique<FunctionAST>(move(Proto), move(E));
    }
    return nullptr;
}

static void HandleDefinition() {
  if (auto Def = ParseDefinition()) {
      cout << "Parsed a function definition: " << endl;
  } else {
      // Skip token for error recovery.
      getNextToken();
  }
}

static void HandleExtern() {
  if (ParseExtern()) {
      cout << "Parsed an extern" << endl;
  } else {
      // Skip token for error recovery.
      getNextToken();
  }
}

static void HandleTopLevelExpression() {
  // Evaluate a top-level expression into an anonymous function.
  if (ParseTopLevelExpr()) {
      cout << "Parsed a top-level expr" << endl;
  } else {
      // Skip token for error recovery.
      getNextToken();
  }
}

static int MainLoop() {
    while (true) {
        getNextToken();
        switch (CurTok) {
            case tok_eof:
                return 0;
            case ';':
                getNextToken();
                break;
            case tok_def:
                HandleDefinition();
                break;
            case tok_extern:
                HandleExtern();
                break;
            default:
                HandleTopLevelExpression();
                break;
        }
    }
}

int main2(int argc, const char * argv[]) {

    BinOpPrecedence['<'] = 10;
    BinOpPrecedence['+'] = 20;
    BinOpPrecedence['-'] = 30;
    BinOpPrecedence['*'] = 40;

    cout << "Simple Lisp 1.0" << endl;
//    cout << "sisp> ";
    TheCode = "def f ( x ) 1;";
    cout << TheCode << endl;
    return MainLoop();
}
